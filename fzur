#!/usr/bin/env bash
set -o pipefail # Add -eu for error and unbound variable checking

CACHE_DIR="$HOME/.cache/fzur"
INFO_DIR="$CACHE_DIR/pkginfo"
PKGS_DIR="$CACHE_DIR/pkgbuild"
# https://stackoverflow.com/a/2924755
export bold=$(tput bold)
export reset=$(tput sgr0)
export red=$(tput setaf 1)

function update_repo {
    mkdir -p $PKGS_DIR
    cd $PKGS_DIR
    if [ -d $1 ]; then
        cd $1
        git pull --quiet
    else
        git clone "https://aur.archlinux.org/$1"
        cd $1
    fi
}

function download_pkg_info {
    if [ ! -s "$INFO_DIR/$1.json" ]; then
        # Download the package info and flattens the arrays into comma separeated strings
        # TODO: Prevent any empty files in the first place
        curl -s "https://aur.archlinux.org/rpc/v5/info?arg[]=$1" | jq -c '.["results"][0] | (.. | arrays) |= join(", ")' > "$INFO_DIR/$1.json"
    fi
}

function aur_install {
    download_pkg_info $1
    deps=$(jq -r '.Depends' < "$INFO_DIR/$1.json" | tr ', ' '\n' | sort)
    if [ "$deps" != null ]; then
        for dep in $(comm -13 <(cat <(pacman -Ssq) <(pacman -Qm) | sort) <(echo "$deps")); do
            echo "${bold}Installing AUR dependency: ${dep}${reset}"
            update_repo $dep
            aur_install $dep --asdeps
        done
    fi

    cd $PKGS_DIR

    printf "View PKGBUILD for $1? (y/n): "
    read answer
    if [ ${answer,,} = y ]; then
        less PKGBUILD
        printf "Continue installation? (y/n): "
        read answer
        [ ${answer,,} = y ] || exit
    fi
    makepkg -si $2
}

function preview {
    cd $INFO_DIR
    download_pkg_info $1
    # TODO: Invalidate cache after some time
    info="$(cat $1.json)"

    maintainer=$(jq -r '.Maintainer' <<< $info)
    if [ "$maintainer" = null ]; then
        maintainer="${red}orphan${reset}"
    fi

    outdated_timestamp=$(jq -r '.OutOfDate' <<< $info)
    if [ "$outdated_timestamp" != null ]; then
        outOfDate="${red} out-of-date ($(date -d @${outdated_timestamp} --iso-8601))${reset}"
    fi

    cat << EOF
${bold}Package Base${reset}    $(jq -r '.PackageBase' <<< $info)
${bold}Description${reset}     $(jq -r '.Description' <<< $info)
${bold}Version${reset}         $(jq -r '.Version' <<< $info)${outOfDate}
${bold}Upstream URL${reset}    $(jq -r '.URL' <<< $info)
${bold}Licenses${reset}        $(jq -r '.License' <<< $info)
${bold}Conflicts${reset}       $(jq -r '.Conflicts' <<< $info)
${bold}Provides${reset}        $(jq -r '.Provides' <<< $info)
${bold}Submitter${reset}       $(jq -r '.Submitter' <<< $info)
${bold}Maintainer${reset}      $maintainer
${bold}Votes${reset}           $(jq -r '.NumVotes' <<< $info)
${bold}Popularity${reset}      $(jq -r '.Popularity' <<< $info)
${bold}Depends On${reset}      $(jq -r '.Depends' <<< $info)
${bold}Optional Deps${reset}   $(jq -r '.OptDepends' <<< $info)
${bold}Make Deps${reset}       $(jq -r '.MakeDepends' <<< $info)
${bold}First Submitted${reset} $(date -d @$(jq -r '.FirstSubmitted' <<< $info))
${bold}Last Modified${reset}   $(date -d @$(jq -r '.LastModified' <<< $info))
EOF
}

function aur_select {
    mkdir -p $INFO_DIR
    cd $CACHE_DIR

    if [ ! -f packages.txt ]; then
        echo -e "${bold}Downloading AUR package list...\n${reset}"
        curl https://aur.archlinux.org/packages.gz | gzip -d > packages.txt
    fi

    # bash -c is needed to recognize the export if the default shell something else
    pkgs=$(fzf -m --preview 'bash -c "preview {1}"' --preview-window 75%,wrap < packages.txt)
    for pkg in $pkgs; do
        echo -e "${bold}Preparing to install $pkg...${reset}"
        update_repo $pkg
        aur_install $pkg
    done
}

function aur_update {
    updates=()
    echo "Checking for AUR updates..."
    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        update_repo $pkg
        # https://unix.stackexchange.com/a/327811
        installed_version=$(pacman -Qi $pkg | grep -Po '^Version\s*: \K.+')
        new_version="$(grep -Po 'pkgver\s*=\s*\K.+' .SRCINFO)-$(grep -Po 'pkgrel\s*=\s*\K.+' .SRCINFO)"
        epoch=$(grep -Po 'epoch\s*=\s*\K.+' .SRCINFO)
        [ $epoch ] && new_version="$epoch:$new_version"
        [ "$(vercmp $installed_version $new_version)" -lt 0 ] && updates+=($pkg)
    done

    selected=$(echo ${updates[@]} | tr ' ' '\n' | fzf -m --bind 'load:select-all')
    for pkg in $selected; do
        echo -e "${bold}Updating $pkg...${reset}"
        aur_install $pkg
    done
}

export -f preview

# https://linuxize.com/post/bash-case-statement/
case $1 in
    '-i' | '--install' | '')
        aur_select;;
    '-c' | '--clean')
        # TODO: Keep repos for installed packages by default
        rm -rf $CACHE_DIR;;
    '-u' | '--update')
        aur_update;;
    *)
        echo "Usage: -${bold}-i${reset}nstall (default), -${bold}-u${reset}pdate or -${bold}-c${reset}lean."
esac
