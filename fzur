#!/usr/bin/env bash
# Requirements: aur-info.sh (needs jq), base-devel, curl, fzf, git

set -euo pipefail

CACHE_DIR=${XDG_CACHE_HOME:-$HOME/.cache}/fzur
PKGS_DIR="$CACHE_DIR/pkgbuild"
SCRIPT_DIR=$(pwd)

bold=$(tput bold)
reset=$(tput sgr0)

update_repo() {
    if [ $# -lt 1 ]; then
        echo "update_repo: No package name provided." && exit 1
    fi
    mkdir -p "$PKGS_DIR"
    cd "$PKGS_DIR"
    if [ -d "$1" ]; then
        cd "$1"
        git pull --quiet
    else
        git clone "https://aur.archlinux.org/$1"
        cd "$1"
    fi
}

download_aur_list() {
    mkdir -p "$CACHE_DIR"
    cd "$CACHE_DIR"
    echo -e "${bold}Downloading AUR package list...\n${reset}"
    curl https://aur.archlinux.org/packages.gz | gzip -d > packages.txt
}

get_dependencies() {
    update_repo "$1"
    for dep in $(grep -Po '^\s*(make)?depends\s*=\s*\K[\w\-\.]+' .SRCINFO); do
        [ "$(pacman -Qqs "^$dep$")" ] && continue
        if [ "$(pacman -Ssq "^$dep$")" ]; then
            pacman_deps+=("$dep")
        else
            aur_deps+=("$dep")
            get_dependencies "$dep"
        fi
    done
}

aur_install() {
    if [ ! "$1" ]; then
        echo "aur_install: No packages provided." && exit 1
    fi
    aur_deps=()
    pacman_deps=()

    echo "Selected: $1"
    for selected in $1; do
        get_dependencies "$selected"
    done

    [ ${#aur_deps[@]} -gt 0 ] && echo AUR dependencies: "${aur_deps[@]}"

    if [ ${#pacman_deps[@]} -gt 0 ]; then
        echo Pacman dependencies: "${pacman_deps[@]}"
        sudo pacman -S --asdeps --needed "${pacman_deps[@]}"
    fi


    # Should be word split
    aur_pkgs=(${aur_deps[@]} $1)

    printf "%s\n" "${aur_pkgs[@]}" | fzf --reverse \
        --header $'PKGBUILDs\nEnter: Accept all\nEscape: Cancel' --header-first \
        --preview "cat $PKGS_DIR/{1}/PKGBUILD" --preview-window 75%,wrap

    for pkg in "${aur_pkgs[@]}"; do
        cd "$PKGS_DIR/$pkg"

        # TODO: Add flag validation
        makepkg "$@"
        built_pkgs+="$(makepkg --packagelist | grep -v '\-debug.*-any.pkg.tar.zst') "
    done

    # Should be word split
    sudo pacman -U --asdeps $(echo "$built_pkgs" | xargs)
    sudo pacman -Dq --asexplicit $1
}

aur_select() {
    [ -f "$CACHE_DIR/packages.txt" ] || download_aur_list
    pkgs=$(fzf -m --reverse --header 'AUR packages to install' --header-first \
        --preview "$SCRIPT_DIR/aur-info.sh {}" --preview-window 75% \
        < "$CACHE_DIR/packages.txt" | xargs)
    aur_install "$pkgs" "$@"
}

function aur_update {
    updates=''
    echo "Checking for AUR updates..."

    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        update_repo "$pkg"
        # https://unix.stackexchange.com/a/327811
        installed_version=$(pacman -Qi "$pkg" | grep -Po '^Version\s*: \K.+')
        new_version=$(grep -Po 'pkgver\s*=\s*\K.+' .SRCINFO)-$(grep -Po 'pkgrel\s*=\s*\K.+' .SRCINFO)
        if [ "$(grep epoch .SRCINFO)" ]; then
            new_version="$(grep -Po 'epoch\s*=\s*\K.+' .SRCINFO):$new_version"
        fi
        if [ "$(vercmp "$installed_version" "$new_version")" -lt 0 ]; then
            updates+="$pkg ($installed_version => $new_version)\n"
        fi
    done

    if [ ! "$updates" ]; then
        echo "Up to date" && exit
    fi

    aur_install "$(echo -e "$updates" | head -c -1 | fzf --accept-nth 1 -m --reverse \
        --header 'AUR packages to update' --header-first --bind 'load:select-all' | xargs)" "$@"
}

[ $# -eq 0 ] && set -- -i

# https://linuxize.com/post/bash-case-statement/
case $1 in
    '-c' | '--clean')
        # TODO: Keep repos for installed packages by default
        rm -rf "$CACHE_DIR";;
    '-i' | '--install')
        shift
        aur_select "$@"
        ;;
    '-s' | '--sync')
        rm -rf "$CACHE_DIR/info"
        download_aur_list
        ;;
    '-u' | '--update')
        shift
        aur_update "$@"
        ;;
    *)
        echo -e 'Usage: fzur [options]\n'
        echo -e "-i, --install\tSelect and install AUR packages with fzf (default)"
        echo -e "-u, --update\tSelect and update AUR packages with fzf"
        echo -e "-s, --sync\tRe-download the AUR package list and clear the info cache"
        echo -e "-c, --clean.\tClear the cache including all PKGBUILD repositories\n"
        echo "makepkg flags may be passed when using --install or --update"
        ;;
esac
