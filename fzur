#!/usr/bin/env bash
set -o pipefail # Add -eu for error and unbound variable checking

CACHE_DIR="$HOME/.cache/fzur"
PKGS_DIR="$CACHE_DIR/pkgbuild"
SCRIPT_DIR=$(pwd)

# https://stackoverflow.com/a/2924755
bold=$(tput bold)
reset=$(tput sgr0)

function update_repo {
    mkdir -p "$PKGS_DIR"
    cd "$PKGS_DIR" || exit
    if [ -d "$1" ]; then
        cd "$1" || exit
        git pull --quiet
    else
        git clone "https://aur.archlinux.org/$1"
        cd "$1" || exit
    fi
}

function aur_install {
    for dep in $(grep -Po '^\s*depends\s*=\s*\K.+' .SRCINFO); do
        # The local package check is for already installed AUR packages
        if [ ! "$(pacman -Ssq "^$dep$")" ] && [ ! "$(pacman -Qqs "^$dep$")" ]; then
            echo "${bold}Installing AUR dependency: ${dep}${reset}"
            update_repo "$dep"
            aur_install "$dep" --asdeps
        fi
    done

    cd "$PKGS_DIR/$1" || exit

    printf 'View PKGBUILD for %s? (y/n): ' "$1"
    read -r answer
    if [ "${answer,,}" = y ]; then
        less PKGBUILD
        printf 'Continue installation? (y/n): '
        read -r answer
        [ "${answer,,}" = y ] || exit
    fi
    makepkg -si "$2"
}

function aur_select {
    mkdir -p "$CACHE_DIR"
    cd "$CACHE_DIR" || exit

    if [ ! -f packages.txt ]; then
        echo -e "${bold}Downloading AUR package list...\n${reset}"
        curl https://aur.archlinux.org/packages.gz | gzip -d > packages.txt
    fi

    # bash -c is needed to recognize the export if the default shell something else
    pkgs=$(fzf -m --preview "$SCRIPT_DIR/aur-preview.sh {}" --preview-window 75%,wrap < packages.txt)
    for pkg in $pkgs; do
        echo -e "${bold}Preparing to install $pkg...${reset}"
        update_repo "$pkg"
        aur_install "$pkg"
    done
}

function aur_update {
    updates=()
    echo "Checking for AUR updates..."
    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        update_repo "$pkg"
        # https://unix.stackexchange.com/a/327811
        installed_version=$(pacman -Qi "$pkg" | grep -Po '^Version\s*: \K.+')
        new_version=$(grep -Po 'pkgver\s*=\s*\K.+' .SRCINFO)-$(grep -Po 'pkgrel\s*=\s*\K.+' .SRCINFO)
        epoch=$(grep -Po 'epoch\s*=\s*\K.+' .SRCINFO)
        [ "$epoch" ] && new_version="$epoch:$new_version"
        [ "$(vercmp "$installed_version" "$new_version")" -lt 0 ] && updates+=("$pkg")
    done

    selected=$(echo "${updates[@]}" | tr ' ' '\n' | fzf -m --bind 'load:select-all')
    for pkg in $selected; do
        echo -e "${bold}Updating $pkg...${reset}"
        aur_install "$pkg"
    done
}

# https://linuxize.com/post/bash-case-statement/
case $1 in
    '-i' | '--install' | '')
        aur_select;;
    '-c' | '--clean')
        # TODO: Keep repos for installed packages by default
        rm -rf "$CACHE_DIR";;
    '-u' | '--update')
        aur_update;;
    *)
        echo "Usage: -${bold}-i${reset}nstall (default), -${bold}-u${reset}pdate or -${bold}-c${reset}lean."
esac
