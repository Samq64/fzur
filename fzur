#!/usr/bin/env bash
set -o pipefail # Add -eu for error and unbound variable checking

CACHE_DIR="$HOME/.cache/fzur"
PKGS_DIR="$CACHE_DIR/pkgbuild"
SCRIPT_DIR=$(pwd)

# https://stackoverflow.com/a/2924755
bold=$(tput bold)
reset=$(tput sgr0)

function update_repo {
    mkdir -p "$PKGS_DIR"
    cd "$PKGS_DIR" || exit
    if [ -d "$1" ]; then
        cd "$1" || exit
        git pull --quiet
    else
        git clone "https://aur.archlinux.org/$1"
        cd "$1" || exit
    fi
}

get_dependencies() {
    update_repo "$1"
    for dep in $(grep -Po '^\s*(make)?depends\s*=\s*\K.+' .SRCINFO); do
        [ "$(pacman -Qqs "^$dep$")" ] && continue
        if [ "$(pacman -Ssq "^$dep$")" ]; then
            pacman_deps+=("$dep")
        else
            aur_deps+=("$dep")
            get_dependencies "$dep"
        fi
    done
}

aur_install() {
    aur_deps=()
    pacman_deps=()

    for selected in $1; do
        get_dependencies "$selected"
    done

    [ ${#aur_deps[@]} -gt 0 ] && echo AUR dependencies: "${aur_deps[@]}"

    if [ ${#pacman_deps[@]} -gt 0 ]; then
        echo Pacman dependencies: "${pacman_deps[@]}"
        sudo pacman -S --asdeps --needed "${pacman_deps[@]}"
    fi

    aur_pkgs=(${aur_deps[@]} $1)

    for pkg in "${aur_pkgs[@]}"; do
        cd "$PKGS_DIR/$pkg" || exit

        printf 'View PKGBUILD for %s? (y/n): ' "$pkg"
        read -r answer
        if [ "${answer,,}" = y ]; then
            less PKGBUILD
            printf 'Continue installation? (y/n): '
            read -r answer
            [ "${answer,,}" = y ] || exit
        fi

        makepkg
        built_pkgs+="$(makepkg --packagelist) "
    done

    sudo pacman -U --asdeps $(echo "$built_pkgs" | xargs)
    sudo pacman -Dq --asexplicit $1
}

function aur_select {
    mkdir -p "$CACHE_DIR"
    cd "$CACHE_DIR" || exit

    if [ ! -f packages.txt ]; then
        echo -e "${bold}Downloading AUR package list...\n${reset}"
        curl https://aur.archlinux.org/packages.gz | gzip -d > packages.txt
    fi

    echo "Selected: $pkgs"
    pkgs=$(fzf -m --reverse --header 'AUR packges to install' --header-first \
        --preview "$SCRIPT_DIR/aur-preview.sh {}" --preview-window 75%,wrap < packages.txt | xargs)
    aur_install "$pkgs"
}

function aur_update {
    updates=''
    echo "Checking for AUR updates..."

    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        update_repo "$pkg"
        # https://unix.stackexchange.com/a/327811
        installed_version=$(pacman -Qi "$pkg" | grep -Po '^Version\s*: \K.+')
        new_version=$(grep -Po 'pkgver\s*=\s*\K.+' .SRCINFO)-$(grep -Po 'pkgrel\s*=\s*\K.+' .SRCINFO)
        epoch=$(grep -Po 'epoch\s*=\s*\K.+' .SRCINFO)
        [ "$epoch" ] && new_version="$epoch:$new_version"
        [ "$(vercmp "$installed_version" "$new_version")" -lt 0 ] && updates+="$pkg ($installed_version => $new_version)\n"
    done

    [ "$updates" ] || exit

    aur_install "$(echo -e "$updates" | head -c -1 | fzf --accept-nth 1 -m --reverse \
        --header 'AUR packges to update' --header-first  --bind 'load:select-all' | xargs)"
}

# https://linuxize.com/post/bash-case-statement/
case $1 in
    '-i' | '--install' | '')
        aur_select;;
    '-c' | '--clean')
        # TODO: Keep repos for installed packages by default
        rm -rf "$CACHE_DIR";;
    '-u' | '--update')
        aur_update;;
    *)
        echo "Usage: -${bold}-i${reset}nstall (default), -${bold}-u${reset}pdate or -${bold}-c${reset}lean."
esac
