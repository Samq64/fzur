#!/usr/bin/env bash
# fzur: An fzf AUR helper
# Requirements: fzur-info (needs jq), base-devel, curl, fzf, git

set -euo pipefail

cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/fzur
pkgs_dir="$cache_dir/pkgbuild"
script_dir=$(realpath "$(dirname "$0")")
fzf_opts=(--reverse --header-first --preview-window '75%,wrap')

bold=$(tput bold)
yellow=$(tput setaf 3)
reset=$(tput sgr0)

download_aur_list() {
    mkdir -p "$cache_dir"
    cd "$cache_dir"
    echo -e "${bold}Downloading AUR package list...\n${reset}"
    curl https://aur.archlinux.org/packages.gz | gzip -d >packages.txt
}

update_repo() {
    local pkg=$1
    mkdir -p "$pkgs_dir"
    cd "$pkgs_dir"
    if [ -d "$pkg" ]; then
        cd "$pkg" && git pull --quiet
    else
        echo Cloning "$pkg" from the AUR...
        git clone --quiet "https://aur.archlinux.org/$pkg"
        cd "$pkg"
    fi
}

get_dependencies() {
    update_repo "$1"

    local dep deps
    deps=$(grep -Po '^\s*(make)?depends = \K[\w\-\.]+' .SRCINFO) || true

    for dep in $deps; do
        [ "$(pacman -Qqs "^$dep$")" ] && continue
        if [ "$(pacman -Ssq "^$dep$")" ]; then
            pacman_pkgs+=("$dep")
        else
            # https://stackoverflow.com/a/47541882
            # Check if pakcage already exists in array
            if ! printf '%s\n' "${aur_pkgs[@]}" | grep -Fxq -- "$dep"; then
                aur_pkgs+=("$dep")
                get_dependencies "$dep"
            fi
        fi
    done
}

install_pkgs() {
    local targets=$1
    local aur_pkgs=()
    local pacman_pkgs=()
    local built_pkgs=()
    local pkg

    echo "${bold}Selected:${reset} $targets"
    for pkg in $targets; do
        if [ "$(pacman -Ssq "^$pkg$")" ]; then
            pacman_pkgs+=("$pkg")
        else
            aur_pkgs+=("$pkg")
            get_dependencies "$pkg"
        fi
    done

    if [ ${#pacman_pkgs[@]} -gt 0 ]; then
        sudo pacman -S --asdeps --needed "${pacman_pkgs[@]}"
    fi

    if [ ${#aur_pkgs[@]} -gt 0 ]; then
        printf "%s\n" "${aur_pkgs[@]}" | fzf "${fzf_opts[@]}" --preview "cat -n $pkgs_dir/{1}/PKGBUILD" \
            --header $'Review PKGBUILDs\nEnter: Accept all\nEscape: Cancel' >/dev/null

        for pkg in "${aur_pkgs[@]}"; do
            cd "$pkgs_dir/$pkg"
            echo -e "\n${bold}Installing ${pkg}...\n${reset}"
            makepkg "$@"
            local tmp
            mapfile -t tmp < <(makepkg --packagelist | grep -v '\-debug.*-any.pkg.tar.zst')
            built_pkgs+=("${tmp[@]}")
        done
        sudo pacman -U --asdeps "${built_pkgs[@]}"
    fi
    sudo pacman -Dq --asexplicit $targets
}

select_pkgs() {
    [ -f "$cache_dir/packages.txt" ] || download_aur_list

    pkgs=$(pacman -Ssq |
        cat - "$cache_dir/packages.txt" |
        fzf "${fzf_opts[@]}" -m --header 'Select packages to install' --preview "$script_dir/fzur-info {1}" |
        xargs)

    install_pkgs "$pkgs" "$@"
}

update_pkgs() {
    printf 'Update all non-AUR packages? (y/n): '
    read -r answer
    [ "${answer,,}" = y ] && sudo pacman -Syu

    local updates=()
    local pkg
    echo "${bold}Checking for AUR updates...${reset}"
    [ -f "$cache_dir/packages.txt" ] || download_aur_list

    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        if ! grep -q "^$pkg$" "$cache_dir/packages.txt"; then
            echo "${yellow}Skipping unknown package: ${pkg}${reset}"
            continue
        fi
        update_repo "$pkg"
        local installed new
        installed=$(pacman -Qi "$pkg" | awk '/^Version/{print $3}')
        new=$(awk '/^\s*pkgver/{ver=$3} /^\s*pkgrel/{print ver "-" $3}' .SRCINFO)
        if grep -q epoch .SRCINFO; then
            new="$(awk '/^\s*epoch/{print $3}' .SRCINFO):$new"
        fi
        if [ "$(vercmp "$installed" "$new")" -lt 0 ]; then
            updates+=("$pkg ($installed => $new)")
        fi
    done

    if [ "${#updates[@]}" -eq 0 ]; then
        echo "All AUR packages are up to date." && return
    fi

    local selected
    selected=$(printf "%s\n" "${updates[@]}" | fzf "${fzf_opts[@]}" --accept-nth 1 -m \
        --header 'Select AUR packages to update' --bind 'load:select-all' | xargs)
    install_pkgs "$selected" "$@"
}

remove() {
    local pkgs
    IFS=" " read -ra pkgs <<<"$(pacman -Qeq |
        fzf "${fzf_opts[@]}" -m --header 'Select packages to remove' --preview 'pacman -Qi {1}'
    )"
    [ "${#pkgs[@]}" -eq 0 ] && return
    echo Selected for removal: "${pkgs[@]}"
    sudo pacman -Rns "${pkgs[@]}"
}

clean() {
    local orphans
    orphans=$(pacman -Qdtq || echo '')
    [ -n "$orphans" ] && sudo pacman -Rns $orphans

    rm -f "$cache_dir/packages.txt"
    rm -rf "$cache_dir/info"

    local pkgs
    pkgs=$(pacman -Qqm)
    for dir in "$pkgs_dir"/*; do
        local name
        name="$(basename "$dir")"
        if ! echo "$pkgs" | grep "^$name$"; then
            echo "Removing PKGBUILD directory for $name"
            rm -rf "$dir"
        fi
    done
}

show_help() {
    echo -e 'Usage: fzur [options]\n'
    echo -e "-c, --clean\tRemove orhpaned packages and clear the fzur cache (except used repositories)"
    echo -e "-i, --install\tInstall packages with fzf (default)"
    echo -e "-r, --remove\tRemove pacakges and their dependencies with fzf (pacman -Rns)"
    echo -e "-s, --sync\tRe-download the AUR package list and clear the info cache"
    echo -e "-u, --update\tRun pacman -Syu and select AUR updates with fzf\n"
    echo "makepkg flags may be passed when using --install or --update"
}

[ $# -eq 0 ] && set -- -i

# https://linuxize.com/post/bash-case-statement/
case $1 in
'-c' | '--clean')
    clean
    ;;
'-i' | '--install')
    shift
    select_pkgs "$@"
    ;;
'-r' | '--remove')
    remove
    ;;
'-s' | '--sync')
    rm -rf "$cache_dir/info"
    download_aur_list
    ;;
'-u' | '--update')
    shift
    update_pkgs "$@"
    ;;
*)
    show_help
    ;;
esac
