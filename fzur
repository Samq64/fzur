#!/usr/bin/env bash
# fzur: An fzf AUR helper
# Requirements: fzur-info (needs jq), base-devel, curl, fzf, git

set -euo pipefail

export FZF_DEFAULT_OPTS='--reverse --header-first --preview-window 75%,wrap'
cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/fzur
pkgs_dir="$cache_dir/pkgbuild"
script_dir=$(realpath "$(dirname "$0")")
pulled_repos=()

bold=$(tput bold)
yellow=$(tput setaf 3)
reset=$(tput sgr0)

download_aur_list() {
    mkdir -p "$cache_dir"
    cd "$cache_dir"
    echo -e "${bold}Downloading AUR package list...\n${reset}"
    curl https://aur.archlinux.org/packages.gz | gzip -d >packages.txt
}

update_repo() {
    local pkg=$1
    if printf '%s\n' "${pulled_repos[@]}" | grep -Fxq "$pkg"; then
        cd "$pkgs_dir/$pkg"
        return
    fi

    mkdir -p "$pkgs_dir"
    cd "$pkgs_dir"
    if [ -d "$pkg" ]; then
        echo "Pulling $pkg..."
        cd "$pkg" && git pull --quiet --autostash
    else
        echo Cloning "$pkg" from the AUR...
        git clone --quiet "https://aur.archlinux.org/$pkg"
        cd "$pkg"
    fi
    pulled_repos+=("$pkg")
}

get_dependencies() {
    update_repo "$1"

    local dep deps makedeps
    deps=$(grep -Po '^\s*depends = \K[\w\-\.]+' .SRCINFO) || true
    makedeps=$(grep -Po '^\s*makedepends = \K[\w\-\.]+' .SRCINFO) || true

    for dep in $makedeps; do
        [ "$(pacman -Qqs "^$dep$")" ] && continue
        if [ "$(pacman -Ssq "^$dep$")" ]; then
            pacman_pkgs+=("$dep")
        else
            install_pkgs "$dep"
            sudo pacman -U --asdeps "$dep"
        fi
    done

    for dep in $deps; do
        [ "$(pacman -Qqs "^$dep$")" ] && continue
        if [ "$(pacman -Ssq "^$dep$")" ]; then
            pacman_pkgs+=("$dep")
        else
            # https://stackoverflow.com/a/47541882
            # Check if pakcage already exists in array
            if ! printf '%s\n' "${aur_pkgs[@]}" | grep -Fxq -- "$dep"; then
                aur_pkgs+=("$dep")
                get_dependencies "$dep"
            fi
        fi
    done
}

install_pkgs() {
    local aur_pkgs=()
    local pacman_pkgs=()
    local built_pkgs=()
    local pkg

    for pkg in "$@"; do
        if [ "$(pacman -Ssq "^$pkg$")" ]; then
            pacman_pkgs+=("$pkg")
        elif grep -q "^$pkg$" "$cache_dir/packages.txt"; then
            aur_pkgs+=("$pkg")
            get_dependencies "$pkg"
        else
            echo "Unknown package: $pkg"
            exit 1
        fi
    done

    if [ ${#pacman_pkgs[@]} -gt 0 ]; then
        sudo pacman -S --asdeps --needed "${pacman_pkgs[@]}"
    fi

    if [ ${#aur_pkgs[@]} -gt 0 ]; then
        printf "%s\n" "${aur_pkgs[@]}" | fzf --preview "cat -n $pkgs_dir/{1}/PKGBUILD" \
            --header 'Review PKGBUILDs' --footer 'Enter: Accept all | Esc: Cancel' >/dev/null

        for pkg in "${aur_pkgs[@]}"; do
            cd "$pkgs_dir/$pkg"
            echo -e "\n${bold}Installing ${pkg}...\n${reset}"
            makepkg $makepkg_opts
            local tmp
            mapfile -t tmp < <(makepkg --packagelist | grep -v '\-debug.*-any.pkg.tar.zst')
            built_pkgs+=("${tmp[@]}")
        done
        sudo pacman -U --asdeps "${built_pkgs[@]}"
    fi
    sudo pacman -Dq --asexplicit "$@"
}

select_pkgs() {
    local list pkgs
    [ -s "$cache_dir/packages.txt" ] || download_aur_list

    [ $aur_only = false ] && list=$(pacman -Ssq | awk '!seen[$0]++') # Remove duplicates from other repos
    [ $repos_only = false ] && list+=$(cat "$cache_dir/packages.txt")

    mapfile -t pkgs < <(
        echo "$list" |
            fzf -m --header 'Select packages to install' --preview "$script_dir/fzur-info {1}"
    )

    [ "${#pkgs[@]}" -eq 0 ] && return
    echo "${bold}Selected:${reset} ${pkgs[*]}"
    install_pkgs "${pkgs[@]}"
}

update_pkgs() {
    [ $aur_only = false ] && sudo pacman -Syu
    [ $repos_only = true ] && return
    local updates=()
    local pkg
    echo "${bold}Checking for AUR updates...${reset}"
    [ -s "$cache_dir/packages.txt" ] || download_aur_list

    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        if ! grep -q "^$pkg$" "$cache_dir/packages.txt"; then
            echo "${yellow}Skipping unknown package: ${pkg}${reset}"
            continue
        fi
        update_repo "$pkg"
        local installed new
        installed=$(pacman -Qi "$pkg" | awk '/^Version/{print $3}')
        new=$(awk '/^\s*pkgver/{ver=$3} /^\s*pkgrel/{print ver "-" $3}' .SRCINFO)
        if grep -q epoch .SRCINFO; then
            new="$(awk '/^\s*epoch/{print $3}' .SRCINFO):$new"
        fi
        if [ "$(vercmp "$installed" "$new")" -lt 0 ]; then
            updates+=("$pkg ($installed => $new)")
        fi
    done

    if [ "${#updates[@]}" -eq 0 ]; then
        echo "All AUR packages are up to date." && return
    fi

    local selected
    mapfile -t selected < <(printf "%s\n" "${updates[@]}" | fzf --accept-nth 1 -m \
        --header 'Select AUR packages to update' --bind 'load:select-all')
    install_pkgs "${selected[@]}"
}

remove() {
    local pkgs=()
    if [ $# -gt 0 ]; then
        pkgs=("$@")
    else
        local filter=''
        [ $aur_only = true ] && filter='-m'
        [ $repos_only = true ] && filter='-n'

        mapfile -t pkgs < <(
            pacman -Qqe $filter | fzf -m --header 'Select packages to remove' --preview 'pacman -Qi {1}'
        )
        [ "${#pkgs[@]}" -eq 0 ] && return
        echo Selected for removal: "${pkgs[@]}"
    fi
    sudo pacman -Rns "${pkgs[@]}"
}

clean() {
    local orphans
    orphans=$(pacman -Qdtq || echo '')
    [ -n "$orphans" ] && sudo pacman -Rns $orphans

    rm -f "$cache_dir/packages.txt"
    rm -rf "$cache_dir/info"

    local pkgs
    pkgs=$(pacman -Qqm)
    for dir in "$pkgs_dir"/*; do
        local name
        name="$(basename "$dir")"
        if ! echo "$pkgs" | grep -q "^$name$"; then
            echo "Removing PKGBUILD directory for $name"
            rm -rf "$dir"
        fi
    done
}

show_help() {
    echo -e 'Usage: fzur [options] [packages]\n'
    echo -e "-c, --clean\tRemove orhpaned packages and clear the fzur cache (except used repositories)"
    echo -e "-i, --install\tInstall packages with fzf (default)"
    echo -e "-r, --remove\tRemove pacakges and their dependencies with fzf (pacman -Rns)"
    echo -e "-s, --sync\tRe-download the AUR package list and clear the info cache"
    echo -e "-u, --update\tRun pacman -Syu and select AUR updates with fzf\n"
    echo -e "-a, --aur\tOnly show/update AUR packages"
    echo -e "--no-aur\tDo not show/update any AUR packages"
    echo -e "--makepkg-flags\tmakepkg flags to be passed when using --install or --update\n"
    echo "Packages may be passed to --install or --remove to skip the fzf menu"
}

action=install
aur_only=false
repos_only=false
makepkg_opts=''
args=$(getopt -n fzur -o achirsu \
    --long aur,no-aur,clean,install,help,makepkg-flags:,remove,sync,update \
    -- "$@")

eval set -- "$args"

while true; do
    case $1 in
    -a | --aur)
        aur_only=true
        shift
        ;;
    -c | --clean)
        clean
        exit
        ;;
    -h | --help)
        show_help
        exit
        ;;
    -i | --install)
        action=install
        shift
        ;;
    --makepkg-flags)
        makepkg_opts=$2
        shift 2
        ;;
    --no-aur)
        repos_only=true
        shift
        ;;
    -r | --remove)
        action=remove
        shift
        ;;
    -s | --sync)
        rm -rf "$cache_dir/info"
        download_aur_list
        exit
        ;;
    -u | --update)
        action=update_pkgs
        shift
        ;;
    --)
        shift
        break
        ;;
    *) break ;;
    esac
done

if [ $action = install ]; then
    if [ $# -eq 0 ]; then
        select_pkgs
    else
        install_pkgs "$@"
    fi
    exit
fi

$action "$@"
