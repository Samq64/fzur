#!/usr/bin/env bash
# Requirements: fzur-info (needs jq), base-devel, curl, fzf, git

set -euo pipefail
shopt -s expand_aliases

PATH="$(pwd):$PATH"
CACHE_DIR=${XDG_CACHE_HOME:-$HOME/.cache}/fzur
PKGS_DIR="$CACHE_DIR/pkgbuild"

bold=$(tput bold)
red=$(tput setaf 1)
yellow=$(tput setaf 3)
reset=$(tput sgr0)
alias fzf="fzf --reverse --header-first --preview-window 75%,wrap"

update_repo() {
    if [ $# -lt 1 ]; then
        echo "${red}update_repo: No package name provided.$reset" && exit 1
    fi
    mkdir -p "$PKGS_DIR"
    cd "$PKGS_DIR"
    if [ -d "$1" ]; then
        cd "$1"
        git pull --quiet
    else
        echo Cloning "$1"...
        git clone -q "https://aur.archlinux.org/$1"
        cd "$1"
    fi
}

download_aur_list() {
    mkdir -p "$CACHE_DIR"
    cd "$CACHE_DIR"
    echo -e "${bold}Downloading AUR package list...\n${reset}"
    curl https://aur.archlinux.org/packages.gz | gzip -d > packages.txt
}

get_dependencies() {
    update_repo "$1"
    for dep in $(grep -Po '^\s*(make)?depends = \K[\w\-\.]+' .SRCINFO); do
        [ "$(pacman -Qqs "^$dep$")" ] && continue
        if [ "$(pacman -Ssq "^$dep$")" ]; then
            pacman_pkgs+=("$dep")
        else
            # https://stackoverflow.com/a/47541882
            # Check if pakcage already exists in array
            if [ ! "$(printf '%s\n' "${aur_pkgs[@]}" | grep -Fx -- "$dep")" ]; then
                aur_pkgs+=("$dep")
                get_dependencies "$dep"
            fi
        fi
    done
}

aur_install() {
    if [ ! "$1" ]; then
        echo "${red}aur_install: No packages provided.$red" && exit 1
    fi
    aur_pkgs=()
    pacman_pkgs=()

    echo -e "${bold}Selected:${reset} $1"
    for selected in $1; do
        if [ "$(pacman -Ssq "^$selected$")" ]; then
            pacman_pkgs+=("$selected")
        else
            aur_pkgs+=("$selected")
            get_dependencies "$selected"
        fi
    done

    if [ ${#pacman_pkgs[@]} -gt 0 ]; then
        sudo pacman -S --asdeps --needed "${pacman_pkgs[@]}"
    fi

    if [ ${#aur_pkgs[@]} -gt 0 ]; then
        printf "%s\n" "${aur_pkgs[@]}" | fzf --preview "cat -n $PKGS_DIR/{1}/PKGBUILD" \
            --header $'PKGBUILDs\nEnter: Accept all\nEscape: Cancel' >/dev/null

        for pkg in "${aur_pkgs[@]}"; do
            cd "$PKGS_DIR/$pkg"
            echo -e "\n${bold}Installing ${pkg}...\n$reset"

            makepkg "$@"
            built_pkgs+="$(makepkg --packagelist | grep -v '\-debug.*-any.pkg.tar.zst') "
        done

        # Should be word split
        sudo pacman -U --asdeps $(echo "$built_pkgs" | xargs)
    fi
    sudo pacman -Dq --asexplicit $1
}

aur_select() {
    [ -f "$CACHE_DIR/packages.txt" ] || download_aur_list
    pkgs=$(pacman -Ssq | cat - "$CACHE_DIR/packages.txt" | fzf -m --header 'AUR packages to install' \
        --preview 'fzur-info {1}' | xargs)
    aur_install "$pkgs" "$@"
}

function aur_update {
    printf 'Update all non-AUR packages? (y/n): '
    read -r answer
    [ "${answer,,}" = y ] && sudo pacman -Syu

    updates=()
    echo "Checking for AUR updates..."

    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        if [ ! "$(grep "^$pkg$" "$CACHE_DIR/packages.txt")" ]; then
            echo "${yellow}Skipping unknown package: $pkg $reset"
            continue
        fi
        update_repo "$pkg"
        installed_version=$(pacman -Qi "$pkg" | awk '/^Version/{print $3}')
        new_version=$(awk '/^\s*pkgver/{ver=$3} /^\s*pkgrel/{print ver "-" $3}' .SRCINFO)
        if [ "$(grep epoch .SRCINFO)" ]; then
            new_version="$(awk '/^\s*epoch/{print $3}' .SRCINFO):$new_version"
        fi
        if [ "$(vercmp "$installed_version" "$new_version")" -lt 0 ]; then
            updates+=("$pkg ($installed_version => $new_version)")
        fi
    done

    if [ "${#updates[@]}" -eq 0 ]; then
        echo "Up to date" && exit
    fi

    aur_install "$(printf "%s\n" "${updates[@]}" | fzf --accept-nth 1 -m \
        --header 'AUR packages to update' --bind 'load:select-all' | xargs)" "$@"
}

clean() {
    orphans=$(pacman -Qdtq || echo none)
    [ "$orphans" != none ] && sudo pacman -Rns $orphans

    rm -f "$CACHE_DIR/packages.txt"
    rm -rf "$CACHE_DIR/info"

    pkgs=$(pacman -Qqm)
    for dir in $PKGS_DIR/*; do
        base="$(basename "$dir")"
        if [ ! "$(echo "$pkgs" | grep "^$base$")" ]; then
            echo "Removing PKGBUILD directory for $base"
            rm -rf "$dir"
        fi
    done
}

[ $# -eq 0 ] && set -- -i

# https://linuxize.com/post/bash-case-statement/
case $1 in
    '-c' | '--clean')
        clean
        ;;
    '-i' | '--install')
        shift
        aur_select "$@"
        ;;
    '-r' | '--remove')
        pkgs=($(pacman -Qeq | fzf -m --preview 'pacman -Qi {1}'))
        [ "${#pkgs[@]}" -gt 0 ] || exit
        echo Selected for removal: "${pkgs[@]}"
        sudo pacman -Rns "${pkgs[@]}"
        ;;
    '-s' | '--sync')
        rm -rf "$CACHE_DIR/info"
        download_aur_list
        ;;
    '-u' | '--update')
        shift
        aur_update "$@"
        ;;
    *)
        echo -e 'Usage: fzur [options]\n'
        echo -e "-c, --clean\tRemove orhpaned packages and clear the fzur cache (except used repositories)"
        echo -e "-i, --install\tInstall packages with fzf (default)"
        echo -e "-r, --remove\tRemove pacakges and their dependencies with fzf (pacman -Rns)"
        echo -e "-s, --sync\tRe-download the AUR package list and clear the info cache"
        echo -e "-u, --update\tRun pacman -Syu and select AUR updates with fzf\n"
        echo "makepkg flags may be passed when using --install or --update"
        ;;
esac
