#!/usr/bin/env bash
set -o pipefail # Add -eu for error and unbound variable checking

# https://stackoverflow.com/a/2924755
export bold=$(tput bold)
export reset=$(tput sgr0)
export red=$(tput setaf 1)

function update_repo {
    mkdir -p "$HOME/.cache/fzur/pkgbuild"
    cd "$HOME/.cache/fzur/pkgbuild"
    if [ -d $1 ]; then
        cd $1
        git pull --quiet
    else
        git clone "https://aur.archlinux.org/$1"
        cd $1
    fi
}

function preview {
    cd "$HOME/.cache/fzur/pkginfo/"
    if [ ! -s "$1.json" ]; then
        # Download the package info and flattens the arrays into comma separeated strings
        # TODO: Prevent any empty files in the first place
        info=$(curl -s "https://aur.archlinux.org/rpc/v5/info?arg[]=$1" | jq -c '.["results"][0] | (.. | arrays) |= join(", ")')
        echo "$info" > "$1.json"
    else
        # TODO: Invalidate cache after some time
        info="$(cat $1.json)"
    fi

    maintainer=$(jq -r '.Maintainer' <<< $info)
    if [ "$maintainer" = null ]; then
        maintainer="${red}orphan${reset}"
    fi

    outdated_timestamp=$(jq -r '.OutOfDate' <<< $info)
    if [ "$outdated_timestamp" != null ]; then
        outOfDate="${red} out-of-date ($(date -d @${outdated_timestamp} --iso-8601))${reset}"
    fi

    cat << EOF
${bold}Package Base${reset}    $(jq -r '.PackageBase' <<< $info)
${bold}Description${reset}     $(jq -r '.Description' <<< $info)
${bold}Version${reset}         $(jq -r '.Version' <<< $info)${outOfDate}
${bold}Upstream URL${reset}    $(jq -r '.URL' <<< $info)
${bold}Licenses${reset}        $(jq -r '.License' <<< $info)
${bold}Conflicts${reset}       $(jq -r '.Conflicts' <<< $info)
${bold}Provides${reset}        $(jq -r '.Provides' <<< $info)
${bold}Submitter${reset}       $(jq -r '.Submitter' <<< $info)
${bold}Maintainer${reset}      $maintainer
${bold}Votes${reset}           $(jq -r '.NumVotes' <<< $info)
${bold}Popularity${reset}      $(jq -r '.Popularity' <<< $info)
${bold}Depends On${reset}      $(jq -r '.Depends' <<< $info)
${bold}Optional Deps${reset}   $(jq -r '.OptDepends' <<< $info)
${bold}Make Deps${reset}       $(jq -r '.MakeDepends' <<< $info)
${bold}First Submitted${reset} $(date -d @$(jq -r '.FirstSubmitted' <<< $info))
${bold}Last Modified${reset}   $(date -d @$(jq -r '.LastModified' <<< $info))
EOF
}

function aur_install {
    mkdir -p "$HOME/.cache/fzur/pkginfo/"
    cd "$HOME/.cache/fzur"

    if [ ! -f packages.txt ]; then
        echo -e "${bold}Downloading AUR package list...\n${reset}"
        curl https://aur.archlinux.org/packages.gz | gzip -d > packages.txt
    fi

    # TODO: Multi-select (-m)
    # bash -c is needed to recognize the export if the default shell something else
    pkg=$(cat packages.txt | fzf --preview 'bash -c "preview {1}"' --preview-window 75%,wrap) || exit 1
    update_repo $pkg
    makepkg -si
}

function aur_update {
    for pkg in $(pacman -Qqm | grep -v '\-debug$'); do
        update_repo $pkg
        # https://unix.stackexchange.com/a/327811
        installed_version=$(pacman -Qi $pkg | grep -Po '^Version\s*: \K.+')
        new_version="$(grep -Po 'pkgver=\K.+' PKGBUILD)-$(grep -Po 'pkgrel=\K.+' PKGBUILD)"
        epoch=$(grep -Po 'epoch=\K.+' PKGBUILD)
        [ $epoch ] && new_version="$epoch:$new_version"
        if [ "$(vercmp $installed_version $new_version)" -lt 0 ]; then
            # TODO: Allow package update selection
            echo -e "${bold}Updating $pkg...${reset}"
            makepkg -si
        fi
    done
}

export -f preview

# https://linuxize.com/post/bash-case-statement/
case $1 in
    '-i' | '--install' | '')
        aur_install;;
    '-c' | '--clean')
        # TODO: Keep repos for installed packages by default
        rm -rf "$HOME/.cache/fzur";;
    '-u' | '--update')
        aur_update;;
    *)
        echo "Usage: -${bold}-i${reset}nstall (default), -${bold}-u${reset}pdate or -${bold}-c${reset}lean."
esac
